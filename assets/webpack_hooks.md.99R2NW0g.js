import{_ as e,c as o,o as i,a2 as c}from"./chunks/framework.3T3Bq219.js";const g=JSON.parse('{"title":"webpack中所有的钩子函数","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/hooks.md","filePath":"webpack/hooks.md","lastUpdated":1710496495000}'),n={name:"webpack/hooks.md"},a=c('<h1 id="webpack中所有的钩子函数" tabindex="-1">webpack中所有的钩子函数 <a class="header-anchor" href="#webpack中所有的钩子函数" aria-label="Permalink to &quot;webpack中所有的钩子函数&quot;">​</a></h1><h2 id="compiler上的钩子函数" tabindex="-1">Compiler上的钩子函数 <a class="header-anchor" href="#compiler上的钩子函数" aria-label="Permalink to &quot;Compiler上的钩子函数&quot;">​</a></h2><h3 id="compile" tabindex="-1">compile <a class="header-anchor" href="#compile" aria-label="Permalink to &quot;compile&quot;">​</a></h3><p><code>SyncHook</code></p><p>beforeCompile 之后立即调用，但在一个新的 compilation 创建之前。这个钩子 不会 被复制到子编译器。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>ExternalsPlugin</code>注册了该钩子函数</p></div><h3 id="thiscompilation" tabindex="-1">thisCompilation <a class="header-anchor" href="#thiscompilation" aria-label="Permalink to &quot;thisCompilation&quot;">​</a></h3><p><code>SyncHook</code></p><p>初始化 compilation 时调用，在触发 compilation 事件之前调用。这个钩子 不会 被复制到子编译器。 回调参数：compilation, compilationParams</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>EnvironmentPlugin</code><code>FlagEntryExportAsUsedPlugin</code><code>WarnDeprecatedOptionPlugin</code><code>WarnNoModeSetPlugin</code><code>ResolverCachePlugin</code><code>ContainerPlugin</code><code>WorkerPlugin</code><code>ModuleChunkFormatPlugin</code><code>ModuleChunkLoadingPlugin</code><code>LazyCompilationPlugin</code><code>SyncModuleIdsPlugin</code><code>ArrayPushCallbackChunkFormatPlugin</code><code>CommonJsChunkFormatPlugin</code><code>AbstractLibraryPlugin ??</code><code>CommonJsChunkLoadingPlugin</code><code>ReadFileCompileAsyncWasmPlugin</code><code>ReadFileCompileWasmPlugin</code><code>AggressiveMergingPlugin</code><code>AggressiveSplittingPlugin</code><code>RuntimeChunkPlugin</code><code>SplitChunksPlugin</code><code>StartupChunkDependenciesPlugin</code><code>ConsumeSharedPlugin</code><code>FetchCompileAsyncWasmPlugin</code><code>FetchCompileWasmPlugin</code><code>JsonpChunkLoadingPlugin</code><code>ImportScriptsChunkLoadingPlugin</code></p></div><p>`</p><p>asyncChunks: undefined baseUri: undefined chunkLoading: undefined dependOn: (1) [&#39;u&#39;] filename: undefined layer: undefined library: undefined name: &#39;a&#39; publicPath: undefined runtime: undefined wasmLoading: undefined</p><p>`</p>',13),d=[a];function l(t,p,s,r,u,m){return i(),o("div",null,d)}const P=e(n,[["render",l]]);export{g as __pageData,P as default};
