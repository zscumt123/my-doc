import{_ as e,c as s,o as a,ae as i}from"./chunks/framework.C0-bF2Gd.js";const n="/my-doc/assets/struct.Ckrtx8E_.jpg",l="/my-doc/assets/page.BrpNuH7p.jpg",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mysql/index.md","filePath":"mysql/index.md","lastUpdated":1749550274000}'),d={name:"mysql/index.md"};function r(p,t,c,o,h,g){return a(),s("div",null,t[0]||(t[0]=[i(`<h2 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-label="Permalink to &quot;存储结构&quot;">​</a></h2><blockquote><p>数据库管理存储空间的基本单位是<code>页</code>，页的大小默认16kb</p></blockquote><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 大小16384</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW VARIABLES  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;innodb_page_size&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+n+`" alt="img"></p><ol><li>区是比页大一级的存储结构，一个区会分配64个连续的页，所以一个区的大小<code>64 * 16kb = 1MB</code></li><li>段（Segment）由一个或多个区组成，区在文件系统是一个连续分配的空间（在 InnoDB 中是连续的 64 个页），不过在段中不要求区与区之间是相邻的。段是数据库中的分配单位，不同类型的数据库对象以不同的段形式存在。当我们创建数据表、索引的时候，就会相应创建对应的段，比如创建一张表时会创建一个表段，创建一个索引时会创建一个索引段</li><li>表空间（Tablespace）是一个逻辑容器，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只能属于一个表空间。数据库由一个或多个表空间组成，表空间从管理上可以划分为<code>系统表空间、用户表空间、撤销表空间、临时表空间等</code>💯</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>innoDB有两种表空间类型，共享表空间和独立表空间，共享表空间就是多张表共用一个表空间， 独立表空间就是每张表有一个独立的表空间</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ON</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW VARIABLES  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;innodb_file_per_table&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><h2 id="页内结构" tabindex="-1">页内结构 <a class="header-anchor" href="#页内结构" aria-label="Permalink to &quot;页内结构&quot;">​</a></h2><p><strong>页（Page）如果按类型划分的话，常见的有数据页（保存 B+ 树节点）、系统页、Undo 页和事务数据页等。数据页是最常使用的页</strong></p><blockquote><p>数据库 I/O 操作的最小单位是页，与数据库相关的内容都会存储在页结构里。数据页包括七个部分，分别是文件头（File Header）、页头（Page Header）、最大最小记录（Infimum+supremum）、用户记录（User Records）、空闲空间（Free Space）、页目录（Page Directory）和文件尾（File Tailer）</p></blockquote><p><img src="`+l+'" alt="img1"></p><table tabindex="0"><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">占用大小</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">头文件</td><td style="text-align:center;">38字节</td><td style="text-align:center;">文件头，描述页的信息</td></tr><tr><td style="text-align:center;">页头</td><td style="text-align:center;">56字节</td><td style="text-align:center;">页头，页的状态信息</td></tr><tr><td style="text-align:center;">最大最小记录</td><td style="text-align:center;">26字节</td><td style="text-align:center;">两个虚拟的行记录</td></tr><tr><td style="text-align:center;">用户记录</td><td style="text-align:center;">不确定</td><td style="text-align:center;">存储行记录内容</td></tr><tr><td style="text-align:center;">空闲空间</td><td style="text-align:center;">不确定</td><td style="text-align:center;">页中还没有被使用的空间</td></tr><tr><td style="text-align:center;">页目录</td><td style="text-align:center;">不确定</td><td style="text-align:center;">存储用户记录的相对位置</td></tr><tr><td style="text-align:center;">文件尾</td><td style="text-align:center;">8字节</td><td style="text-align:center;">校验页是否完整</td></tr></tbody></table>',11)]))}const b=e(d,[["render",r]]);export{y as __pageData,b as default};
