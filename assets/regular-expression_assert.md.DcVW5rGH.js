import{_ as e,c as o,o as c,a2 as d}from"./chunks/framework.3T3Bq219.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"regular-expression/assert.md","filePath":"regular-expression/assert.md","lastUpdated":1710496495000}'),t={name:"regular-expression/assert.md"},a=d('<h2 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h2><h3 id="单词边界" tabindex="-1">单词边界 <a class="header-anchor" href="#单词边界" aria-label="Permalink to &quot;单词边界&quot;">​</a></h3><ul><li>一个单词的边界用 <code>\\b</code>来表示</li></ul><div class="tip custom-block"><p class="custom-block-title">demo</p><p>比如 <code>\\btom</code>可以匹配<code>tom</code>,但是不能匹配<code>atom</code>,因为<code>atom</code>的<code>t</code>的不是边界， 而且<code>\\btom\\b</code>只能匹配<code>tom</code></p></div><h3 id="行的开始或者结束" tabindex="-1">行的开始或者结束 <a class="header-anchor" href="#行的开始或者结束" aria-label="Permalink to &quot;行的开始或者结束&quot;">​</a></h3><ul><li><code>^</code>代表每一行的开头</li><li><code>$</code>代表每一行的结尾</li></ul><h3 id="环视" tabindex="-1">环视 <a class="header-anchor" href="#环视" aria-label="Permalink to &quot;环视&quot;">​</a></h3><ul><li><code>(?&lt;=Y)</code>：<code>肯定逆序环视</code>，左边是y， 比如 <code>(?&lt;=\\d)th</code>左边是数字<code>th</code>，能匹配<code>9th</code></li><li><code>(?&lt;!Y)</code>: <code>否定逆序环视</code>, 左边不是y， 比如 <code>(?&lt;!\\d)th</code>左边不是数字的<code>th</code>,能匹配<code>health</code></li><li><code>(?=Y)</code>: <code>肯定顺序环视</code>, 右边是y，比如 <code>six(?=\\d)</code>右边是数字的<code>six</code>,能匹配<code>six6</code></li><li><code>(?!y)</code>: <code>否定顺序环视</code>, 右边不是y， 比如<code>hi(?!\\d)</code>左边不是数字的<code>hi</code>,能匹配<code>high</code></li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>环视中虽然也有括号，但是不会保存成子组</p></div>',9),l=[a];function i(s,r,h,n,_,u){return c(),o("div",null,l)}const b=e(t,[["render",i]]);export{m as __pageData,b as default};
